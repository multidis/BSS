library(BSS)
Y <- gammaKernelBSS(10000, 100, 1, 3, -0.2, 1)
gammaKernelBSSFit(Y[[1]], 100, 10)
gammaKernelBSSFit(Y[[1]], 100, 20)
gammaKernelBSSFit(Y[[1]], 100, 5)
Y <- gammaKernelBSS(100000, 1000, 1, 3, -0.2, 1)
gammaKernelBSSFit(Y[[1]], 100, 5)
gammaKernelBSSFit(Y[[1]], 1000)
gammaKernelBSSFit(Y[[1]], 1000, 20)
gammaKernelBSSFit(Y[[1]], 1000, 200)
gammaKernelBSSFit(Y[[1]], 1000, 100)
powerKernelBSSFit(Y[[1]], 1000, 100)
powerKernelBSSFit(Y[[1]], 1000, 10)
library(BSS)
powerKernelBSSFit(rnorm(10000), n = 100)
powerKernelCorrelation(-0.2, -1, 1/100)
powerKernelCorrelation(-0.2, -1, 1/1000)
powerKernelCorrelation(-0.2, -1, 1/100000)
powerKernelCorrelation(-0.2, -1, 1/10000000)
library(BSS)
Y <- gammaKernelBSS(100000, 1000, 1, 3, -0.2, 1)
powerKernelBSSFit(Y[[1]], 1000, 100)
library(BSS)
Y <- gammaKernelBSS(100000, 1000, 1, 3, -0.2, 1)
powerKernelBSSFit(Y[[1]], 1000, 100)
library(BSS)
Y <- gammaKernelBSS(100000, 1000, 1, 3, -0.2, 1)
powerKernelBSSFit(Y[[1]], 1000, 100)
powerKernelBSSFit(Y[[1]], 1000, 10)
Y <- powerKernelBSS(100000, 1000, 1, 3, -0.2, -1)
powerKernelBSSFit(Y[[1]], 1000, 10)
powerKernelBSSFit(Y[[1]], 1000, 100)
Y <- powerKernelBSS(100000, 10000, 1, 3, -0.2, -1)
powerKernelBSSFit(Y[[1]], 10000, 10)
bssAlphaFit(Y[[1]])
bssAlphaFit(Y[[1]], 1)
bssAlphaFit(Y[[1]], 2)
bssAlphaFit(Y[[1]], 3)
bssAlphaFit(Y[[1]], 4)
bssAlphaFit(Y[[1]], 5)
bssAlphaFit(Y[[1]], 6)
gammaKernelBSSFit(Y[[1]], 10000)
gammaKernelBSSFit(Y[[1]], 10000,20)
gammaKernelBSSFit(Y[[1]], 10000,200)
powerKernelBSSFit(powerKernelBSS(100000, 25000, 1, 5, -0.4, -1.2), 10000, 10)
powerKernelBSSFit(powerKernelBSS(100000, 25000, 1, 5, -0.4, -1.2)[[1]], 25000, 10)
gammaKernelBSSFit(powerKernelBSS(100000, 25000, 1, 5, -0.4, -1.2)[[1]], 25000, 10)
bssAlphaFit(powerKernelBSS(100000, 25000, 1, 5, -0.4, -1.2)[[1]])
powerKernelCorrelation(-0.2, -1, 0.000001)
powerKernelCorrelation(-0.2, -1, 0.0000001)
powerKernelCorrelation(-0.2, -1, 0.000000001)
powerKernelCorrelation(-0.2, -1, 0.000001)
powerKernelCorrelation(-0.2, -1, 0.00001)
powerKernelCorrelation(-0.2, -1, 0.0000001)
devtools::document()
library(BSS)
library(BSS)
devtools::document()
library(BSS)
?gammaKernelBSS
devtools::document()
library(BSS)
devtools::document()
library(BSS)
tools::Rd2latex(bssAlphaFit)
tools::Rd2latex("bssAlphaFit.Rd")
getwd()
setwd("~/R/BSS/man")
tools::Rd2latex("bssAlphaFit.Rd")
tools::Rd2latex("bssAlphaFit.Rd")
tools::Rd2latex("bssAlphaFit.Rd", out = "Documentation.txt")
tools::Rd2latex("gammaKernelBSS.Rd", out = "Documentation.txt")
?tools::Rd2latex
tools::Rd2latex("bssAlphaFit.Rd", out = "Documentation.txt")
tools::Rd2latex("gammaKernelBSSFit.Rd")
tools::Rd2latex("bssAlphaFit.Rd")
tools::Rd2latex("bssAlphaFit.Rd")
tools::Rd2latex("gammaKernelBSS.Rd")
tools::Rd2latex("gammaKernelBSSFit.Rd")
tools::Rd2latex("gammaKernelBSSFit.Rd")
tools::Rd2latex("gammaKernelCorrelation.Rd"	)
tools::Rd2latex("gammaKernelCorrelation.Rd"	)
tools::Rd2latex("gammaKernelCorrelation.Rd"	)
tools::Rd2latex("gammaKernelTau.Rd")
tools::Rd2latex("gammaKernelTauAsymptotic.Rd"	)
tools::Rd2latex("hybridSchemeCovarianceMatrix.Rd"	)
tools::Rd2latex("powerKernelBSS.Rd"	)
tools::Rd2latex("powerKernelBSSFit.Rd")
tools::Rd2latex("powerKernelCorrelation.Rd"	)
tools::Rd2latex("powerKernelTau.Rd")
tools::Rd2latex("realisedPowerVariation.Rd")
tools::Rd2latex("tauNonParametricEstimate.Rd")
tools::Rd2latex("estimateAccumulatedVolatility.Rd")
tools::Rd2latex("estimateAccumulatedVolatility.Rd")
library(BSS)
realisedPowerVariation <- function(Y, p) {
return sum(abs(diff(Y))^p)
}
source('~/.active-rstudio-document', echo=TRUE)
y = rnorm(n = 1000, 0, 1)
y = rnorm(n = 1000, 0, 1)
bssAlphaFit(y)
bssAlphaFit2(y)
y = rnorm(n = 1000, 0, 1)
bssAlphaFit(y)
bssAlphaFit2(y)
y = rnorm(n = 1000, 0, 1)
bssAlphaFit(y)
bssAlphaFit2(y)
CMD check --as-cran
library(devtools)
check("BSS")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(BSS)
library(rhub)
pkg_path <- "E:/MEGA/PhD/BSS article/Code/BSS"
check_on_windows("E:/MEGA/PhD/BSS article/Code/BSS")
check_on_windows("E:/MEGA/PhD/BSS article/Code/BSS")
gammaKernelCorrelation(-0.1, 1, 0)
BSS::gammaKernelCorrelation(-0.1, 1, 0)
BSS::gammaKernelCorrelation(-0.1, 0.5, 0)
devtools::test_coverage()
BSS::gammaKernelCorrelation(-0.1, 0.5, 0)
BSS::gammaKernelCorrelation(-0.1, 0.5, 0)
devtools::build()
BSS::gammaKernelCorrelation(-0.1, 0.5, 0)
library(BSS)
gammaKernelCorrelation(-0.1, 1, 0)
alpha <- -0.1
lambda <- 1
h <- 0
ifelse(h == 0, 1,
2^(-alpha + 1/2) / gamma( alpha + 1/2) * (lambda * h)^(alpha + 1/2) * besselK(lambda*h, nu = alpha + 1/2))
library(BSS)
gammaKernelCorrelation(-0.5, 1, 0)
devtools::check()
check_on_macos(pkg_path)
library(rhub)
pkg_path <- "E:/MEGA/PhD/BSS article/Code/BSS"
check_on_macos(pkg_path)
check(pkg_path, macos)
check(pkg_path, "macos")
check(pkg_path, "macOS")
check(pkg_path, "macos-highsierra-release-cran")
# check package on all platforms
check_for_cran(pkg_path)
library(BSS)
source('E:/MEGA/PhD/BSS article/Code/CRAN_package_check.R', echo=TRUE)
library(BSS)
version
library(BSS)
devtools::check()
vol <- exponentiatedOrnsteinUhlenbeck(N = 10000, n = 100, T = 1, theta = 0.5, beta = 0.125)
Y <- gammaKernelBSS(N = 10000, n = 100, T = 1, kappa = 3, alpha = -0.2, lambda = 1.0, sigma = vol)
estimateAccumulatedVolatility(Y, n = 100, p = 2, method = 'nonparametric', kernel = 'gamma')
Y
vol <- exponentiatedOrnsteinUhlenbeck(N = 10000, n = 100, T = 1, theta = 0.5, beta = 0.125)
bss_simulation <- gammaKernelBSS(N = 10000, n = 100, T = 1, kappa = 3, alpha = -0.2, lambda = 1.0, sigma = vol)
y <- bss_simulation$bss
estimateAccumulatedVolatility(Y, n = 100, p = 2, method = 'nonparametric', kernel = 'gamma')
y
estimateAccumulatedVolatility(y, n = 100, p = 2, method = 'nonparametric', kernel = 'gamma')
plot(estimateAccumulatedVolatility(y, n = 100, p = 2, method = 'nonparametric', kernel = 'gamma'))
plot(diff(estimateAccumulatedVolatility(y, n = 100, p = 2, method = 'nonparametric', kernel = 'gamma')
))
plot(diff(estimateAccumulatedVolatility(y, n = 100, p = 2, method = 'nonparametric', kernel = 'gamma')
), type = 'l')
lines(vol)
lines(vol, col = 2)
vol
bss_simulation
plot(y)
plot(y, type = 'l')
library(BSS)
devtools::check()
devtools::check()
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.4
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.4
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.4
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.4
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.4
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.4
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- 0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 1000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- 0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 10000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- 0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 10000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- 0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 10000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
N <- 100000
n <- 10000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
bssAlphaFit(y, p = 2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
N <- 100000
n <- 10000
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
gammaKernelBSSFit(y, n, num_lags = 10)
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta_vol <- 0.125
kappa <- 3
alpha <- -0.2
beta_pwr <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta_vol)
bss_simulation <- powerKernelBSS(N, n, T, kappa, alpha, beta_pwr, sigma = vol)
bss_simulation
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta_vol <- 0.125
kappa <- 3
alpha <- -0.2
beta_pwr <- -1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta_vol)
bss_simulation <- powerKernelBSS(N, n, T, kappa, alpha, beta_pwr, sigma = vol)
bss_simulation
hybridSchemeCovarianceMatrix(kappa, n, alpha)
library(BSS)
devtools::check()
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta_vol <- 0.125
kappa <- 3
alpha <- -0.2
beta_pwr <- -1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta_vol)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, beta_pwr, sigma = vol)
y <- bss_simulation$bss
powerKernelBSSFit(y, N, num_lags = 10)
powerKernelBSSFit(y, n, num_lags = 10)
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta_vol <- 0.125
kappa <- 3
alpha <- -0.2
beta_pwr <- -1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta_vol)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, beta_pwr, sigma = vol)
y <- bss_simulation$bss
powerKernelBSSFit(y, n, num_lags = 10)
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta_vol <- 0.125
kappa <- 3
alpha <- -0.2
beta_pwr <- -1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta_vol)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, beta_pwr, sigma = vol)
y <- bss_simulation$bss
powerKernelBSSFit(y, n, num_lags = 10)
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
gammaKernelBSSFit(y, n, num_lags = 10)
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
gammaKernelBSSFit(y, n, num_lags = 10)
N <- 10000
n <- 100
T <- 1.0
theta <- 0.5
beta <- 0.125
kappa <- 3
alpha <- -0.2
lambda <- 1.0
vol <- exponentiatedOrnsteinUhlenbeck(N, n, T, theta, beta)
bss_simulation <- gammaKernelBSS(N, n, T, kappa, alpha, lambda, sigma = vol)
y <- bss_simulation$bss
gammaKernelBSSFit(y, n, num_lags = 10)
devtools::build()
devtools::check()
library(BSS)
source('E:/MEGA/PhD/BSS article/Code/CRAN_package_check.R', echo=TRUE)
library(BSS)
devtools::build()
library(BSS)
list(0:10, 1:5)
list(lower = 0:10, 1:5)
library(BSS)
library(BSS)
devtools::build()
install.packages("devtools")
devtools::build()
install.packages("E:/MEGA/PhD/BSS article/Code/BSS_0.1.0.tar.gz", repos = NULL, type="source")
library(BSS)
install.packages("phangorn")
install.packages("E:/MEGA/PhD/BSS article/Code/BSS_0.1.0.tar.gz", repos = NULL, type="source")
install.packages("hypergeo")
install.packages("E:/MEGA/PhD/BSS article/Code/BSS_0.1.0.tar.gz", repos = NULL, type="source")
library(BSS)
devtools::build()
devtools::check()
devtools::build(
devtools::build()
devtools::check()
devtools::build(
devtools::build()
devtools::check()
library(BSS)
devtools::build()
devtools::check()
devtools::build()
devtools::check()
library(BSS)
library(BSS)
devtools::build()
devtools::check()
source('E:/MEGA/PhD/BSS article/Code/CRAN_package_check.R', echo=TRUE)
